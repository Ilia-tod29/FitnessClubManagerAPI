// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: gallery.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGalleryItem = `-- name: CreateGalleryItem :one
INSERT INTO gallery (
    image
) VALUES (
    $1
) RETURNING id, image, created_at
`

func (q *Queries) CreateGalleryItem(ctx context.Context, image pgtype.Text) (Gallery, error) {
	row := q.db.QueryRow(ctx, createGalleryItem, image)
	var i Gallery
	err := row.Scan(&i.ID, &i.Image, &i.CreatedAt)
	return i, err
}

const deleteGalleryItem = `-- name: DeleteGalleryItem :exec
DELETE FROM gallery
WHERE id = $1
`

func (q *Queries) DeleteGalleryItem(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteGalleryItem, id)
	return err
}

const getGalleryItem = `-- name: GetGalleryItem :one
SELECT id, image, created_at FROM gallery
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGalleryItem(ctx context.Context, id int64) (Gallery, error) {
	row := q.db.QueryRow(ctx, getGalleryItem, id)
	var i Gallery
	err := row.Scan(&i.ID, &i.Image, &i.CreatedAt)
	return i, err
}

const listGalleryItem = `-- name: ListGalleryItem :many
SELECT id, image, created_at FROM gallery
ORDER BY id
`

func (q *Queries) ListGalleryItem(ctx context.Context) ([]Gallery, error) {
	rows, err := q.db.Query(ctx, listGalleryItem)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Gallery{}
	for rows.Next() {
		var i Gallery
		if err := rows.Scan(&i.ID, &i.Image, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGalleryItem = `-- name: UpdateGalleryItem :one
UPDATE gallery
set image = $2
WHERE id = $1
RETURNING id, image, created_at
`

type UpdateGalleryItemParams struct {
	ID    int64       `json:"id"`
	Image pgtype.Text `json:"image"`
}

func (q *Queries) UpdateGalleryItem(ctx context.Context, arg UpdateGalleryItemParams) (Gallery, error) {
	row := q.db.QueryRow(ctx, updateGalleryItem, arg.ID, arg.Image)
	var i Gallery
	err := row.Scan(&i.ID, &i.Image, &i.CreatedAt)
	return i, err
}
