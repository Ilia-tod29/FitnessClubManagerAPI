// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email,
    hashed_password,
    suspended,
    role
) VALUES (
    $1, $2, $3, $4
) RETURNING id, email, suspended, role, created_at
`

type CreateUserParams struct {
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
	Suspended      bool   `json:"suspended"`
	Role           string `json:"role"`
}

type CreateUserRow struct {
	ID        int64              `json:"id"`
	Email     string             `json:"email"`
	Suspended bool               `json:"suspended"`
	Role      string             `json:"role"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.HashedPassword,
		arg.Suspended,
		arg.Role,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Suspended,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users
WHERE id = $1
RETURNING id, email, suspended, role, created_at
`

type DeleteUserRow struct {
	ID        int64              `json:"id"`
	Email     string             `json:"email"`
	Suspended bool               `json:"suspended"`
	Role      string             `json:"role"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) DeleteUser(ctx context.Context, id int64) (DeleteUserRow, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i DeleteUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Suspended,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, suspended, role, created_at FROM users
WHERE id = $1 LIMIT 1
`

type GetUserRow struct {
	ID        int64              `json:"id"`
	Email     string             `json:"email"`
	Suspended bool               `json:"suspended"`
	Role      string             `json:"role"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Suspended,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const listAllUsers = `-- name: ListAllUsers :many
SELECT id, email, suspended, role, created_at FROM users
ORDER BY id
`

type ListAllUsersRow struct {
	ID        int64              `json:"id"`
	Email     string             `json:"email"`
	Suspended bool               `json:"suspended"`
	Role      string             `json:"role"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) ListAllUsers(ctx context.Context) ([]ListAllUsersRow, error) {
	rows, err := q.db.Query(ctx, listAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAllUsersRow{}
	for rows.Next() {
		var i ListAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Suspended,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, suspended, role, created_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

type ListUsersRow struct {
	ID        int64              `json:"id"`
	Email     string             `json:"email"`
	Suspended bool               `json:"suspended"`
	Role      string             `json:"role"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Suspended,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
set suspended = $2
WHERE id = $1
RETURNING id, email, suspended, role, created_at
`

type UpdateUserParams struct {
	ID        int64 `json:"id"`
	Suspended bool  `json:"suspended"`
}

type UpdateUserRow struct {
	ID        int64              `json:"id"`
	Email     string             `json:"email"`
	Suspended bool               `json:"suspended"`
	Role      string             `json:"role"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.Suspended)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Suspended,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}
